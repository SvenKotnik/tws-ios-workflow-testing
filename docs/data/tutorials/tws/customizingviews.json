{"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/tws\/customizingviews"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews"},"metadata":{"categoryPathComponent":"Tutorial-Table-of-Contents","category":"Learn to use the SDK","role":"project","title":"Customize views to fit your application"},"sections":[{"chapter":"Customizing TWSView","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to customize your view to fit your applications profile."},{"type":"text","text":" "},{"type":"text","text":"Customize loading, preloading and error views."}]}],"estimatedTimeInMinutes":3,"kind":"hero","title":"Customize views to fit your application"},{"kind":"tasks","tasks":[{"stepsSection":[{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First lets display a snippet."}]}],"code":"CustomizingViews_00.swift","caption":[]},{"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Lets create a view that will be displayed while the page is loading."}],"type":"paragraph"}],"code":"CustomizingViews_01.swift","caption":[]},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"And now a view for the errors.","type":"text"}]}],"code":"CustomizingViews_02.swift","caption":[]},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now to bring it all together we will bind these two views to TWSView, which will enable them to be used when snippet is reporting an error or being loaded into the frame."}]}],"code":"CustomizingViews_03.swift","caption":[{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"We used LoadingView for both loadingView and preloadingView, because it is best if these two are the same."}],"type":"paragraph"}],"style":"note"}]}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"In this tutorial you will learn how to inject custom views into TWSView to customize loading and error screens.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Custom-loading-and-error-views","title":"Custom loading and error views"}]},{"abstract":[{"type":"text","text":"Learn how to intercept desired URLs and use them in native flows"}],"action":{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor","isActive":true,"overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Intercepting URL requests"}],"hierarchy":{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView"]],"modules":[{"projects":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet","sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet#Displaying-a-Snippet","kind":"task"}]},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet","sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Connect-with-the-TWS-portal","kind":"task"},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Presenting-snippets","kind":"task"}]},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation","sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation#Manager-creation-and-registration","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch#Mix-Match"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch"},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications","sections":[{"kind":"task","reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications#Integrating-TWSNotifications"}]}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Display-your-first-snippet"},{"projects":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews","sections":[{"kind":"task","reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews#Custom-loading-and-error-views"}]},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor","sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor#Custom-interceptors","kind":"task"}]}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView"}]},"references":{"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet#Presenting-snippets":{"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Presenting-snippets","abstract":[{"text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views.","type":"text"}],"title":"Presenting snippets","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/tws\/remotesnippet#Presenting-snippets"},"CustomizingViews_02.swift":{"highlights":[],"identifier":"CustomizingViews_02.swift","fileName":"ErrorView.swift","content":["import Foundation","import SwiftUI","","struct ErrorView: View {","    var error: Error","    ","    var body: some View {","        VStack {","            Image(systemName: \"exclamationmark.triangle\")","                .padding(.bottom)","            Text(error.localizedDescription)","                ","        }","        .frame(width: 300)","        .padding()","        .background(Color.red)","        .foregroundStyle(.white)","        .clipShape(RoundedRectangle(cornerRadius: 16))","    }","}"],"type":"file","syntax":"swift","fileType":"swift"},"doc://tws-ios.TWS/tutorials/TWS/CustomInterceptor#Custom-interceptors":{"title":"Custom interceptors","abstract":[{"text":"Learn how to intercept desired URLs and use them in native flows","type":"text"}],"type":"section","url":"\/tutorials\/tws\/custominterceptor#Custom-interceptors","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor#Custom-interceptors","kind":"section","role":"pseudoSymbol"},"doc://tws-ios.TWS/tutorials/TWS/MixAndMatch":{"url":"\/tutorials\/tws\/mixandmatch","title":"Combine remote and local snippets","kind":"project","type":"topic","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch","role":"project","estimatedTime":"5min","abstract":[{"type":"text","text":"Once you start mixing remote and local snippets, there are a few important considerations to keep in mind. Since the manager is injected into the environment, it can be accessed from anywhere in the app. However, this setup assumes that snippets are handled remotely. To successfully work with both remote and local snippets, youâ€™ll need to follow specific rules and best practices."}]},"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet#Connect-with-the-TWS-portal":{"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/tws\/remotesnippet#Connect-with-the-TWS-portal","abstract":[{"type":"text","text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views."}],"title":"Connect with the TWS portal","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Connect-with-the-TWS-portal"},"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents/Customizing-TWSView":{"type":"topic","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView","url":"\/tutorials\/tutorial-table-of-contents\/customizing-twsview","abstract":[],"role":"article","title":"Customizing TWSView","kind":"article"},"doc://tws-ios.TWS/tutorials/TWS/Notifications#Integrating-TWSNotifications":{"type":"section","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications#Integrating-TWSNotifications","url":"\/tutorials\/tws\/notifications#Integrating-TWSNotifications","abstract":[{"type":"text","text":"In this tutorial you will learn how to easily integrate TWSNotifications in your existing push notification code base."}],"role":"pseudoSymbol","title":"Integrating TWSNotifications","kind":"section"},"doc://tws-ios.TWS/tutorials/TWS/LocalSnippet":{"title":"Display your first local snippet","role":"project","abstract":[{"type":"text","text":"Learn how to work with TWS snippets locally without connecting to our backend service. This tutorial will guide you through the steps to display a webpage snippet in your app, bypassing the backend, and focusing solely on rendering and showcasing the snippet content."}],"type":"topic","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet","kind":"project","url":"\/tutorials\/tws\/localsnippet","estimatedTime":"2min"},"doc://tws-ios.TWS/tutorials/TWS/Notifications":{"estimatedTime":"3min","title":"Integrating TWSNotifications with your notifications","url":"\/tutorials\/tws\/notifications","kind":"project","type":"topic","abstract":[{"type":"text","text":"In this tutorial you will learn how to easily integrate TWSNotifications in your existing push notification code base."}],"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications","role":"project"},"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents":{"title":"Getting Started","abstract":[{"type":"text","text":"Follow the tutorials to learn how to use the SDK for displaying snippets."}],"role":"overview","type":"topic","kind":"overview","url":"\/tutorials\/tutorial-table-of-contents","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents"},"doc://tws-ios.TWS/tutorials/TWS/CustomizingViews#Custom-loading-and-error-views":{"url":"\/tutorials\/tws\/customizingviews#Custom-loading-and-error-views","role":"pseudoSymbol","title":"Custom loading and error views","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews#Custom-loading-and-error-views","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to customize your view to fit your applications profile."},{"type":"text","text":" "},{"type":"text","text":"Customize loading, preloading and error views."}]},"doc://tws-ios.TWS/tutorials/TWS/CustomInterceptor":{"title":"Intercepting URL requests","abstract":[{"text":"Learn how to intercept desired URLs and use them in native flows","type":"text"}],"role":"project","estimatedTime":"5min","type":"topic","kind":"project","url":"\/tutorials\/tws\/custominterceptor","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor"},"CustomizingViews_03.swift":{"fileName":"CustomView.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","identifier":"CustomizingViews_03.swift","content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    ","    var body : some View {","        TWSView(snippet: mySnippet)","            .twsBind(loadingView: { AnyView(LoadingView()) })","            .twsBind(preloadingView: { AnyView(LoadingView()) })","            .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","    }","}"]},"CustomizingViews_01.swift":{"fileName":"LoadingView.swift","highlights":[],"syntax":"swift","type":"file","fileType":"swift","identifier":"CustomizingViews_01.swift","content":["import Foundation","import SwiftUI","","struct LoadingView: View {","    var body: some View {","        ZStack {","            Color.green","            ProgressView()","                .frame(width: 200, height: 200)","                .background(.blue)","        }","    }","}"]},"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet":{"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet","type":"topic","abstract":[{"text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views.","type":"text"}],"kind":"project","role":"project","estimatedTime":"3min","title":"Display your first remote snippet","url":"\/tutorials\/tws\/remotesnippet"},"doc://tws-ios.TWS/tutorials/TWS/ManagerCreation":{"url":"\/tutorials\/tws\/managercreation","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation","abstract":[{"type":"text","text":"Learn different ways of creating and managing TWSManager"}],"role":"project","type":"topic","title":"Creating and managing TWSManager","estimatedTime":"5min","kind":"project"},"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents/Display-your-first-snippet":{"title":"Display your first snippet","abstract":[],"role":"article","type":"topic","kind":"article","url":"\/tutorials\/tutorial-table-of-contents\/display-your-first-snippet","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Display-your-first-snippet"},"doc://tws-ios.TWS/tutorials/TWS/ManagerCreation#Manager-creation-and-registration":{"role":"pseudoSymbol","title":"Manager creation and registration","url":"\/tutorials\/tws\/managercreation#Manager-creation-and-registration","type":"section","abstract":[{"text":"Learn different ways of creating and managing TWSManager","type":"text"}],"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation#Manager-creation-and-registration","kind":"section"},"doc://tws-ios.TWS/tutorials/TWS/LocalSnippet#Displaying-a-Snippet":{"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet#Displaying-a-Snippet","url":"\/tutorials\/tws\/localsnippet#Displaying-a-Snippet","kind":"section","abstract":[{"type":"text","text":"Learn how to work with TWS snippets locally without connecting to our backend service. This tutorial will guide you through the steps to display a webpage snippet in your app, bypassing the backend, and focusing solely on rendering and showcasing the snippet content."}],"type":"section","role":"pseudoSymbol","title":"Displaying a Snippet"},"doc://tws-ios.TWS/tutorials/TWS/MixAndMatch#Mix-Match":{"role":"pseudoSymbol","url":"\/tutorials\/tws\/mixandmatch#Mix-Match","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch#Mix-Match","title":"Mix & Match","kind":"section","abstract":[{"type":"text","text":"Once you start mixing remote and local snippets, there are a few important considerations to keep in mind. Since the manager is injected into the environment, it can be accessed from anywhere in the app. However, this setup assumes that snippets are handled remotely. To successfully work with both remote and local snippets, youâ€™ll need to follow specific rules and best practices."}],"type":"section"},"doc://tws-ios.TWS/tutorials/TWS/CustomizingViews":{"estimatedTime":"3min","title":"Customize views to fit your application","abstract":[{"type":"text","text":"Learn how to customize your view to fit your applications profile."},{"type":"text","text":" "},{"type":"text","text":"Customize loading, preloading and error views."}],"url":"\/tutorials\/tws\/customizingviews","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews","role":"project","kind":"project","type":"topic"},"CustomizingViews_00.swift":{"type":"file","syntax":"swift","fileType":"swift","content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    ","    var body : some View {","        TWSView(snippet: mySnippet)","    }","}"],"identifier":"CustomizingViews_00.swift","fileName":"CustomView.swift","highlights":[]}}}